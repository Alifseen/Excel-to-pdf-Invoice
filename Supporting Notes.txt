Section 25
Think of User:
think of user when creating a program
If alot of people will use it, then you should have a GUI or webapp, otherwise CLI is fine.
Usually automation programs are written as scripts.

Input vs Output:
For front end you have a visual design to follow, so you can plan your code according, but that is not the case in backend. So the trick is to write pseudo code starting from input and output, then adding things in between


MultiCells:
So far, we have only added single-line cells to a PDF using the pdf.cell() method. However, that method does not work for bigger pieces of text that expand across multiple lines. For such text, you should use the multi_cell method:

pdf.multi_cell(w, h, txt)



Here is a complete example for you to try. The code will generate an output.pdf file with multiline text inside.



from fpdf import FPDF

pdf = FPDF(orientation="P", unit="mm", format="A4")
pdf.add_page()

content = """
Lorem ipsum dolor sit amet, consectetur adipiscing
elit, sed do eiusmod tempor incididunt ut labore
et dolore magna aliqua. Ut enim ad minim veniam,
quis nostrud exercitation ullamco.
"""

pdf.set_font(family="Times", size=12)
pdf.multi_cell(w=0, h=6, txt=content)
pdf.output("output.pdf")

Pycharm Debugger:
Without function definitions:
Create a debugging breakpoint in the line where error occured
execute debug, this executes the code till the break line
it also opens two tabs, debugger tab and console tab

console tab is same as python except for the fact that it lets you experiment with the line after the breaking point where the error occured. So this console has the code till the breakpoint executed and frozen.
This allows you to debug error codes without worrying about changing the code till you have figured out what to do.

In case of more subtle logical errors where you are not getting the output you should. You can place the breakpoint at the first line and execute the code 1 line at a time, step by step, using the debugger tab and pressing "step into my code".
This will give you the output of each line executed in the debugger tab to see which line has the logical error.


With function definitions:
In this case, you will get multiple error lines, the last line is where the problem is indicated usually. That is where you can add a breakpoint and check. Incase of subtle logical errors where you are not getting the output you want, place the break point in the first line after the function definition.

Stepover button skips executing the function definition lines and executes the next line instead.

step into button takes you into the modules code as well, where as step into my code only goes into your code, not the libraries.

Run to cursor button execute all the lines between breakpoint and the cursor